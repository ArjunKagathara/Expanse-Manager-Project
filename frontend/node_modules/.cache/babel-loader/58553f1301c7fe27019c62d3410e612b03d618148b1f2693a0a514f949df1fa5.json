{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arjun\\\\OneDrive\\\\Desktop\\\\expense manager\\\\frontend\\\\src\\\\context\\\\globalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useContext, useState } from \"react\"\n// import axios from 'axios'\n\n// const BASE_URL = \"http://localhost:5000/api/v1/\";\n\n// const GlobalContext = React.createContext()\n\n// export const GlobalProvider = ({children}) => {\n\n//     const [incomes, setIncomes] = useState([])\n//     const [expenses, setExpenses] = useState([])\n//     const [error, setError] = useState(null)\n\n//     //calculate incomes\n//     const addIncome = async (income) => {\n//         const response = await axios.post(`${BASE_URL}add-income`, income)\n//             .catch((err) =>{\n//                 setError(err.response.data.message)\n//             })\n//         getIncomes()\n//     }\n\n//     const getIncomes = async () => {\n//         const response = await axios.get(`${BASE_URL}get-incomes`)\n//         setIncomes(response.data)\n//         console.log(response.data)\n//     }\n\n//     const deleteIncome = async (id) => {\n//         const res  = await axios.delete(`${BASE_URL}delete-income/${id}`)\n//         getIncomes()\n//     }\n\n//     const totalIncome = () => {\n//         let totalIncome = 0;\n//         incomes.forEach((income) =>{\n//             totalIncome = totalIncome + income.amount\n//         })\n\n//         return totalIncome;\n//     }\n\n//     //calculate incomes\n//     const addExpense = async (income) => {\n//         const response = await axios.post(`${BASE_URL}add-expense`, income)\n//             .catch((err) =>{\n//                 setError(err.response.data.message)\n//             })\n//         getExpenses()\n//     }\n\n//     const getExpenses = async () => {\n//         const response = await axios.get(`${BASE_URL}get-expenses`)\n//         setExpenses(response.data)\n//         console.log(response.data)\n//     }\n\n//     const deleteExpense = async (id) => {\n//         const res  = await axios.delete(`${BASE_URL}delete-expense/${id}`)\n//         getExpenses()\n//     }\n\n//     const totalExpenses = () => {\n//         let totalIncome = 0;\n//         expenses.forEach((income) =>{\n//             totalIncome = totalIncome + income.amount\n//         })\n\n//         return totalIncome;\n//     }\n\n//     const totalBalance = () => {\n//         return totalIncome() - totalExpenses()\n//     }\n\n//     const transactionHistory = () => {\n//         const history = [...incomes, ...expenses]\n//         history.sort((a, b) => {\n//             return new Date(b.createdAt) - new Date(a.createdAt)\n//         })\n\n//         return history.slice(0, 99999)\n\n// }\n\n//     return (\n//         <GlobalContext.Provider value={{\n//             addIncome,\n//             getIncomes,\n//             incomes,\n//             deleteIncome,\n//             expenses,\n//             totalIncome,\n//             addExpense,\n//             getExpenses,\n//             deleteExpense,\n//             totalExpenses,\n//             totalBalance,\n//             transactionHistory,\n//             error,\n//             setError\n//         }}>\n//             {children}\n//         </GlobalContext.Provider>\n//     )\n// }\n\n// export const useGlobalContext = () =>{\n//     return useContext(GlobalContext)\n// }\n\nimport React, { useContext, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\nconst GlobalContext = /*#__PURE__*/React.createContext();\nexport const GlobalProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Generic function for handling CRUD operations\n  const handleCRUDOperation = async (url, method, data, stateUpdater) => {\n    try {\n      const response = await axios[method](url, data);\n      stateUpdater(response.data);\n    } catch (error) {\n      setError(error.response.data.message);\n    }\n  };\n\n  // Function to calculate total amount\n  const calculateTotalAmount = items => {\n    return items.reduce((total, item) => total + item.amount, 0);\n  };\n\n  // Function to get total income\n  const totalIncome = () => calculateTotalAmount(incomes);\n\n  // Function to get total expenses\n  const totalExpenses = () => calculateTotalAmount(expenses);\n\n  // Function to get total balance\n  const totalBalance = () => totalIncome() - totalExpenses();\n\n  // Function to get transaction history\n  const transactionHistory = () => {\n    const history = [...incomes, ...expenses];\n    history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    return history;\n  };\n\n  // CRUD operations for incomes\n  const handleIncomes = {\n    add: income => handleCRUDOperation(`${BASE_URL}add-income`, 'post', income, setIncomes),\n    get: () => handleCRUDOperation(`${BASE_URL}get-incomes`, 'get', null, setIncomes),\n    delete: id => handleCRUDOperation(`${BASE_URL}delete-income/${id}`, 'delete', null, setIncomes)\n  };\n\n  // CRUD operations for expenses\n  const handleExpenses = {\n    add: expense => handleCRUDOperation(`${BASE_URL}add-expense`, 'post', expense, setExpenses),\n    get: () => handleCRUDOperation(`${BASE_URL}get-expenses`, 'get', null, setExpenses),\n    delete: id => handleCRUDOperation(`${BASE_URL}delete-expense/${id}`, 'delete', null, setExpenses)\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      incomes,\n      expenses,\n      error,\n      totalIncome,\n      totalExpenses,\n      totalBalance,\n      transactionHistory,\n      handleIncomes,\n      handleExpenses\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n};\n_s(GlobalProvider, \"tEtYkz3TSUkMCKA3FBENwBvPpJ4=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useContext","useState","axios","BASE_URL","GlobalContext","createContext","GlobalProvider","children","incomes","setIncomes","expenses","setExpenses","error","setError","handleCRUDOperation","url","method","data","stateUpdater","response","message","calculateTotalAmount","items","reduce","total","item","amount","totalIncome","totalExpenses","totalBalance","transactionHistory","history","sort","a","b","Date","createdAt","handleIncomes","add","income","get","delete","id","handleExpenses","expense","useGlobalContext"],"sources":["C:/Users/arjun/OneDrive/Desktop/expense manager/frontend/src/context/globalContext.js"],"sourcesContent":["// import React, { useContext, useState } from \"react\"\r\n// import axios from 'axios'\r\n\r\n\r\n// const BASE_URL = \"http://localhost:5000/api/v1/\";\r\n\r\n\r\n// const GlobalContext = React.createContext()\r\n\r\n// export const GlobalProvider = ({children}) => {\r\n\r\n//     const [incomes, setIncomes] = useState([])\r\n//     const [expenses, setExpenses] = useState([])\r\n//     const [error, setError] = useState(null)\r\n\r\n//     //calculate incomes\r\n//     const addIncome = async (income) => {\r\n//         const response = await axios.post(`${BASE_URL}add-income`, income)\r\n//             .catch((err) =>{\r\n//                 setError(err.response.data.message)\r\n//             })\r\n//         getIncomes()\r\n//     }\r\n\r\n//     const getIncomes = async () => {\r\n//         const response = await axios.get(`${BASE_URL}get-incomes`)\r\n//         setIncomes(response.data)\r\n//         console.log(response.data)\r\n//     }\r\n\r\n//     const deleteIncome = async (id) => {\r\n//         const res  = await axios.delete(`${BASE_URL}delete-income/${id}`)\r\n//         getIncomes()\r\n//     }\r\n\r\n//     const totalIncome = () => {\r\n//         let totalIncome = 0;\r\n//         incomes.forEach((income) =>{\r\n//             totalIncome = totalIncome + income.amount\r\n//         })\r\n\r\n//         return totalIncome;\r\n//     }\r\n\r\n\r\n//     //calculate incomes\r\n//     const addExpense = async (income) => {\r\n//         const response = await axios.post(`${BASE_URL}add-expense`, income)\r\n//             .catch((err) =>{\r\n//                 setError(err.response.data.message)\r\n//             })\r\n//         getExpenses()\r\n//     }\r\n\r\n//     const getExpenses = async () => {\r\n//         const response = await axios.get(`${BASE_URL}get-expenses`)\r\n//         setExpenses(response.data)\r\n//         console.log(response.data)\r\n//     }\r\n\r\n//     const deleteExpense = async (id) => {\r\n//         const res  = await axios.delete(`${BASE_URL}delete-expense/${id}`)\r\n//         getExpenses()\r\n//     }\r\n\r\n//     const totalExpenses = () => {\r\n//         let totalIncome = 0;\r\n//         expenses.forEach((income) =>{\r\n//             totalIncome = totalIncome + income.amount\r\n//         })\r\n\r\n//         return totalIncome;\r\n//     }\r\n\r\n\r\n//     const totalBalance = () => {\r\n//         return totalIncome() - totalExpenses()\r\n//     }\r\n\r\n//     const transactionHistory = () => {\r\n//         const history = [...incomes, ...expenses]\r\n//         history.sort((a, b) => {\r\n//             return new Date(b.createdAt) - new Date(a.createdAt)\r\n//         })\r\n\r\n//         return history.slice(0, 99999)\r\n        \r\n// }\r\n\r\n\r\n//     return (\r\n//         <GlobalContext.Provider value={{\r\n//             addIncome,\r\n//             getIncomes,\r\n//             incomes,\r\n//             deleteIncome,\r\n//             expenses,\r\n//             totalIncome,\r\n//             addExpense,\r\n//             getExpenses,\r\n//             deleteExpense,\r\n//             totalExpenses,\r\n//             totalBalance,\r\n//             transactionHistory,\r\n//             error,\r\n//             setError\r\n//         }}>\r\n//             {children}\r\n//         </GlobalContext.Provider>\r\n//     )\r\n// }\r\n\r\n// export const useGlobalContext = () =>{\r\n//     return useContext(GlobalContext)\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useContext, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\r\n\r\nconst GlobalContext = React.createContext();\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [incomes, setIncomes] = useState([]);\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Generic function for handling CRUD operations\r\n    const handleCRUDOperation = async (url, method, data, stateUpdater) => {\r\n        try {\r\n            const response = await axios[method](url, data);\r\n            stateUpdater(response.data);\r\n        } catch (error) {\r\n            setError(error.response.data.message);\r\n        }\r\n    };\r\n\r\n    // Function to calculate total amount\r\n    const calculateTotalAmount = (items) => {\r\n        return items.reduce((total, item) => total + item.amount, 0);\r\n    };\r\n\r\n    // Function to get total income\r\n    const totalIncome = () => calculateTotalAmount(incomes);\r\n\r\n    // Function to get total expenses\r\n    const totalExpenses = () => calculateTotalAmount(expenses);\r\n\r\n    // Function to get total balance\r\n    const totalBalance = () => totalIncome() - totalExpenses();\r\n\r\n    // Function to get transaction history\r\n    const transactionHistory = () => {\r\n        const history = [...incomes, ...expenses];\r\n        history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n        return history;\r\n    };\r\n\r\n    // CRUD operations for incomes\r\n    const handleIncomes = {\r\n        add: (income) => handleCRUDOperation(`${BASE_URL}add-income`, 'post', income, setIncomes),\r\n        get: () => handleCRUDOperation(`${BASE_URL}get-incomes`, 'get', null, setIncomes),\r\n        delete: (id) => handleCRUDOperation(`${BASE_URL}delete-income/${id}`, 'delete', null, setIncomes)\r\n    };\r\n\r\n    // CRUD operations for expenses\r\n    const handleExpenses = {\r\n        add: (expense) => handleCRUDOperation(`${BASE_URL}add-expense`, 'post', expense, setExpenses),\r\n        get: () => handleCRUDOperation(`${BASE_URL}get-expenses`, 'get', null, setExpenses),\r\n        delete: (id) => handleCRUDOperation(`${BASE_URL}delete-expense/${id}`, 'delete', null, setExpenses)\r\n    };\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            incomes,\r\n            expenses,\r\n            error,\r\n            totalIncome,\r\n            totalExpenses,\r\n            totalBalance,\r\n            transactionHistory,\r\n            handleIncomes,\r\n            handleExpenses\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n    return useContext(GlobalContext);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}